/*Q1. Print the type of file where file name accepted through Command Line */

#include <stdio.h>
#include <string.h>

int main(int argc, char *argv[])
{
    if (argc != 2)
   {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
   }

    char *filename = argv[1];
    char *fileExtension = strrchr(filename, '.');

    if (fileExtension)
    {
       
        fileExtension++;

        if (strcmp(fileExtension, "txt") == 0)
	{
            printf("Text File\n");
        }
	else if (strcmp(fileExtension, "jpg") == 0 || strcmp(fileExtension, "jpeg") == 0)
	{
            printf("JPEG Image\n");
        }
	else if (strcmp(fileExtension, "png") == 0)
	{
            printf("PNG Image\n");
        }
	else if (strcmp(fileExtension, "pdf") == 0)
	{
            printf("PDF File\n");
        }
        else
	{
            printf("Unknown File Type\n");
        }
        }
     else
     {
        printf("File has no extension.\n");
     }

    return 0;
}

/*Q2.Write a C program which creates a child process to run linux/ unix command
or any user defined program. The parent process set the signal handler for
death of child signal and Alarm signal. If a child process does not complete its
execution in 5 second then parent process kills child process.*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>

void child_handler(int signum) {
    if (signum == SIGCHLD) {
        printf("Child process terminated.\n");
    }
}

void alarm_handler(int signum) {
    if (signum == SIGALRM) {
        printf("Child process execution time exceeded. Killing the child.\n");
        exit(EXIT_FAILURE);
    }
}

int main() {
    pid_t pid;
    int status;

    // Set up signal handlers
    signal(SIGCHLD, child_handler);
    signal(SIGALRM, alarm_handler);

    // Create a child process
    if ((pid = fork()) < 0) {
        perror("Fork error");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Child process
        // Replace "your_command" with the command or program you want to run
        execlp("ls", "ls", (char *)NULL);
        perror("Exec error");
        exit(EXIT_FAILURE);
    } else {
        // Parent process
        // Set an alarm for 5 seconds
        alarm(5);

        // Wait for the child process to complete
        waitpid(pid, &status, 0);

        // Cancel the alarm
        alarm(0);

        printf("Parent process exiting.\n");
    }

    return 0;
}
