/*Q1.Take multiple files as Command Line Arguments and print their inode number.*/
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<sys/stat.h>

int main(int argc, char *argv[])
{
    if(argc<2)
      {
        printf("enter file name as command line argument\n");
        return 1;
      }
       int i;
       for(i=1;i<argc;i++)
	{
		struct stat fileStat;
		if(stat(argv[i],&fileStat)<0)
		{
		  printf("failed to get incode number for file:%s\n",argv[i]);
		  continue;
                }
		printf("file:%s,Incode Number:%d\n",argv[i],fileStat.st_ino);
        }
         return 0;
}

/* Q2.Write a C program to send SIGALRM signal by child process to parent
process and parent process make a provision to catch the signal and display
alarm is fired.(Use Kill, fork, signal and sleep system call)*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>

void alarm_handler(int signum)
 {
    printf("Alarm is fired!\n");
 }

int main() 
{
    pid_t child_pid;

    // Create a child process
    child_pid = fork();

    if (child_pid == -1) 
	{
        perror("fork");
        exit(1);
         }

    if (child_pid == 0) 
	{
        // This is the child process
        sleep(2); // Wait for 2 seconds
        kill(getppid(), SIGALRM); // Send SIGALRM to the parent process
        } 
	else 
	{
        // This is the parent process
        signal(SIGALRM, alarm_handler); // Set up the signal handler for SIGALRM

        while (1)
	 {
            // Parent is running, waiting for the SIGALRM signal
            sleep(1);
         }
       }

    return 0;
}
