

Q.1) Write a C program to get and set the resource limits such as files, memory associated with a process	

#include <stdio.h>
#include <sys/resource.h>
#include <stdlib.h>

int main() {
    struct rlimit limit;

    if (getrlimit(RLIMIT_NOFILE, &limit) == 0) {
        printf("Current max open files limit: %ld (soft), %ld (hard)\n", limit.rlim_cur, limit.rlim_max);
    } else {
        perror("getrlimit");
        return 1;
    }

    limit.rlim_cur = 1024; // Soft limit
    limit.rlim_max = 2048; // Hard limit

    if (setrlimit(RLIMIT_NOFILE, &limit) == 0) {
        printf("New max open files limit set successfully.\n");

        if (getrlimit(RLIMIT_NOFILE, &limit) == 0) {
            printf("Updated max open files limit: %ld (soft), %ld (hard)\n", limit.rlim_cur, limit.rlim_max);
        } else {
            perror("getrlimit");
            return 1;
        }
    } else {
        perror("setrlimit");
        return 1;
    }

    return 0;
}

Q.2)	Write a C program that redirects standard output to a file output.txt. (use of dup and open system call).

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int file_descriptor = open("redirect_assi13.txt", O_WRONLY | O_CREAT | O_TRUNC);

    if (file_descriptor == -1)
    {
        perror("Failed to open redirect_assi13.txt");
        return 1;
    }

    dup2(file_descriptor, STDOUT_FILENO);
	close(file_descriptor);
	printf("This will be written to redirect_assi13.txt\n");
	dup2(STDOUT_FILENO, STDOUT_FILENO);
	printf("This will be displayed on the terminal\n");	
	return 0;
}

