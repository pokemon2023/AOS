1. Create a file with hole in it.

#include<stdio.h>
#include<stdlib.h>
#include<fcntl.h>
#include<unistd.h>
int main()
{
	int fd=open("file_with_hole_text",O_WRONLY | O_CREAT | O_TRUNC,0666);
	if(fd==1)
	{	
		perror("open");
		exit(1);
	}
	const char *data1="this is the beggining of the file";
	write(fd,data1,strlen(data1));

	off_t hole_size=1024;
	lseek(fd,hole_size,SEEK_CUR);

	const char *data2="this is the beggining of the file";
	write(fd,data2,strlen(data2));
	
	close(fd);
	return 0;
}
**************************************************************************
2./*Take multiple files as Command Line Arguments and print their inode number*/

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h> 
#include <sys/types.h> 
#include <sys/stat.h> 
int get_inode (int fd) { 
	struct stat buf; 
	int ret; 
	ret = fstat (fd, &buf); 
	if (ret < 0) { 
		perror ("fstat"); 
		//return −1; 
	} 
	return buf.st_ino; 
} 

int main (int argc, char *argv[]) { 
	int fd, inode; 
	if (argc < 2) { 
	fprintf (stderr, "usage: %s <file>\n", argv[0]); 
	//return 1; 
	} 
	fd = open (argv[1], O_RDONLY); 
	if (fd < 0) { perror ("open"); 
	//return 1; 
	} 
	inode = get_inode(fd); 
	printf ("%d\n", inode); 
	return 0; 
}
********************************************************************************
3./*Write a C program to find file properties such as inode number, number of hard link, File permissions, File size, File access and modification time and so on of a given file using stat() system call.*/


#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h>
#include <time.h>

void printFileProperties(struct stat stats);

int main()
{
    char path[100];
    struct stat stats;

    printf("Enter source filename : ");
    scanf("%s", path);

    if (stat(path, &stats) == 0)
    {
        printFileProperties(stats);
    }
    else
    {
        printf("Unable to get file properties.\n");
        printf("Please check whether '%s' file exists.\n", path);
    }
    return 0;
}

void printFileProperties(struct stat stats)
{
    struct tm dt;

    printf("\nFile access: ");
    if (stats.st_mode & R_OK)
        printf("read ");
    if (stats.st_mode & W_OK)
        printf("write ");
    if (stats.st_mode & X_OK)
        printf("execute");

    printf("\nFile size: %d", stats.st_size);

    dt = *(gmtime(&stats.st_ctime));
    printf("\nCreated on: %d-%d-%d %d:%d:%d", dt.tm_mday, dt.tm_mon, dt.tm_year + 1900, 
                                              dt.tm_hour, dt.tm_min, dt.tm_sec);

    dt = *(gmtime(&stats.st_mtime));
    printf("\nModified on: %d-%d-%d %d:%d:%d", dt.tm_mday, dt.tm_mon, dt.tm_year + 1900, 
                                              dt.tm_hour, dt.tm_min, dt.tm_sec);
}
********************************************************************************************************
4./* Print the type of file where file name accepted through Command Line */

#include<stdio.h>
#include<sys/typs.h>
#include<sys/stat.h>
#include<stdlib.h>

int main(int argc, char argc[]){
	if(argc != 2){
		fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
		return 1;	
	}
	const char *filename = argv[1];
	struct stat file_info;
	
	if(stat(filename, &file_info) == -1){
		perror("Error getting file information");
		return;
	}

	if()

}

**********************************************************************************************************
5./* Write a C program to find whether a given file is present in current directory  or not */


#include<stdio.h>
#include<unistd.h>

int main(int argc,char *argv[]){
	if(access(argv[1],F_OK)==0)
		printf("File %s exists.",argv[1]);
	else
		printf("File not exists.");
	return 0;
}
*****************************************************************************************************
6./*Write a C program that a string as an argument and return all the files that  begins with that name in the current directory. For example > ./a.out foo will  return all file names that begins with foo */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <prefix>\n", argv[0]);
        return 1;
    }

    char *prefix = argv[1];

    DIR *dir;
    struct dirent *entry;

    dir = opendir(".");
    if (dir == NULL) {
        perror("Error opening directory");
        return 1;
    }

    printf("Files starting with '%s' in the current directory:\n", prefix);

    while ((entry = readdir(dir)) != NULL) {
        if (strncmp(prefix, entry->d_name, strlen(prefix)) == 0) {
            printf("%s\n", entry->d_name);
        }
    }

    closedir(dir);

    return 0;
}
*****************************************************************************************
7./* Read the current directory and display the name of the files, no of files in  current directory  
(Hint: Current Directory is represented by .(dot)) */



#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

int main() {
    DIR *dir;
    struct dirent *entry;
    int fileCount = 0;

    dir = opendir(".");
    if (dir == NULL) {
        perror("Error opening directory");
        return 1;
    }

    printf("Files in the current directory:\n");

    while ((entry = readdir(dir)) != NULL) {
        if (entry->d_type == DT_REG) { // Check if it's a regular file
            printf("%s\n", entry->d_name);
            fileCount++;
        }
    }

    closedir(dir);

    printf("\nTotal number of files in the current directory: %d\n", fileCount);

    return 0;
}
************************************************************************************
8./*  Write a C program which receives file names as command line arguments and  display those filenames in ascending order according to their sizes.  (e.g $ a.out a.txt b.txt c.txt, …)   */


#include<stdio.h>
#include<sys/stat.h>
#include<stdlib.h>


struct FileInfo{
	char *name;
	long size;
};

int main(int argc,char *argv[]){
	int i,j;
	if(argc<2){
		printf("Usage : %s \n",argv[0]);
		return 1;
	}

struct FileInfo fileInfos[argc - 1];

for(i=1;i<argc;i++){
	fileInfos[i-1].name = argv[i];
	struct stat fileStat;

	if(stat(argv[i],&fileStat) == 0 && S_ISREG(fileStat.st_mode)){
		fileInfos[i-1].size = fileStat.st_size;
	}
	else{
		printf("Skip non-regular file : %s\n",argv[i]);
		fileInfos[i-1].size = -1;
	}
}

for(i=0;i<argc - 1;i++){
	for(j=0;j<argc-1-i;j++){
		if(fileInfos[j].size > fileInfos[j+1].size){
		struct FileInfo temp = fileInfos[j];
		fileInfos[j] =fileInfos[j+1];
		fileInfos[j+1] = temp;
		}
	}
}

for(i=0;i<argc-1;i++){
	if(fileInfos[i].size>=0){
		printf("%s - %Id bytes \n",fileInfos[i].name,fileInfos[i].size);
	}
}
	return 0;

}
***********************************************************************************
9./* Display all the files from current directory which are created in particular  month  */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <sys/stat.h>
#include <time.h>

// Array of month names
const char *month_names[] = {
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
};

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <month_number>\n", argv[0]);
        return 1;
    }

    int target_month = atoi(argv[1]);
   
    if (target_month < 1 || target_month > 12) {
        fprintf(stderr, "Invalid month number. Please provide a number between 1 and 12.\n");
        return 2;
    }

    struct tm current_time;
    time_t now;
    time(&now);
    localtime_r(&now, &current_time);

    DIR *dir = opendir(".");
   
    if (dir == NULL) {
        perror("opendir");
        return 3;
    }

    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) {
        struct stat fileStat;

        if (stat(entry->d_name, &fileStat) == -1) {
            perror("stat");
            continue;
        }

        struct tm file_time;
        localtime_r(&fileStat.st_mtime, &file_time);

        if (file_time.tm_mon + 1 == target_month) {
            char formatted_time[100];
            strftime(formatted_time, sizeof(formatted_time), "%b %Y", &file_time);

            printf("%s (%s)\n", entry->d_name, formatted_time);
        }
    }

    closedir(dir);

    return 0;
}
*******************************************************************************
10./*  Display all the files from current directory whose size is greater that n Bytes  Where n is accept from user.   */


#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <sys/stat.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <size_in_bytes>\n", argv[0]);
        return 1;
    }

    long long int min_size = atoll(argv[1]);

    if (min_size <= 0) {
        fprintf(stderr, "Invalid size. Please provide a positive size in bytes.\n");
        return 2;
    }

    DIR *dir = opendir(".");
   
    if (dir == NULL) {
        perror("opendir");
        return 3;
    }

    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) {
        struct stat fileStat;

        if (stat(entry->d_name, &fileStat) == -1) {
            perror("stat");
            continue;
        }

        if (S_ISREG(fileStat.st_mode) && fileStat.st_size > min_size) {
            printf("%s\n", entry->d_name);
        }
    }

    closedir(dir);

    return 0;
}
***********************************************************************************
11./*  Write a C Program that demonstrates redirection of standard output to a file.   */

#include <stdio.h>

int main() {
    // Redirection: stdout will be written to "output.txt"
    freopen("redirect_assi11.txt", "w", stdout);

    // Now, anything printed to stdout will go to "output.txt"
    printf("This will be written to output file with named as  redirect_assi11.txt\n");
    printf("Hello, World!  This text is written with the help of code.\n");
    printf("Hello, Abhishek Awate!\n");

    // Close the redirected output file
    fclose(stdout);

    return 0;
}

*****************************************************************************************
12./*  Write a C program that will only list all subdirectories in alphabetical order  from current directory.   */



#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

int main(void){
	struct dirent **namelist;
	int n;
	int i=0;
	n = scandir(".", &namelist, 0, alphasort);
	if (n < 0)
		perror("scandir");
	else {
		while (i<n) {
			printf("%s\n", namelist[i]->d_name);
			free(namelist[i]);
			i++;
		}
	free(namelist);
	}
}
**************************************************************************************************************
13./*  Write a C program that redirects standard output to a file output.txt.
(use of dup and open system call).  */

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int file_descriptor = open("redirect_assi13.txt", O_WRONLY | O_CREAT | O_TRUNC);

    if (file_descriptor == -1)
    {
        perror("Failed to open redirect_assi13.txt");
        return 1;
    }

    dup2(file_descriptor, STDOUT_FILENO);
	close(file_descriptor);
	printf("This will be written to redirect_assi13.txt\n");
	dup2(STDOUT_FILENO, STDOUT_FILENO);
	printf("This will be displayed on the terminal\n");	
	return 0;
}
******************************************************************************************************************
14./*  Write a C program to Identify the type (Directory, character device, Block
device, Regular file, FIFO or pipe, symbolic link or socket) of given file using
stat() system call.  */

#include <stdio.h>
#include <sys/stat.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <file_path>\n", argv[0]);
        return 1;
    }

    struct stat fileStat;

    if (stat(argv[1], &fileStat) < 0) {
        perror("stat");
        return 1;
    }

    printf("File type: ");

    if (S_ISDIR(fileStat.st_mode)) {
        printf("Directory\n");
    } else if (S_ISCHR(fileStat.st_mode)) {
        printf("Character Device\n");
    } else if (S_ISBLK(fileStat.st_mode)) {
        printf("Block Device\n");
    } else if (S_ISREG(fileStat.st_mode)) {
        printf("Regular File\n");
    } else if (S_ISFIFO(fileStat.st_mode)) {
        printf("FIFO or Pipe\n");
    } else if (S_ISLNK(fileStat.st_mode)) {
        printf("Symbolic Link\n");
    } else if (S_ISSOCK(fileStat.st_mode)) {
        printf("Socket\n");
    } else {
        printf("Unknown\n");
    }

    return 0;
}
********************************************************************************************
15./*  Generate parent process to write unnamed pipe and will read from it  */


#include <stdio.h>
#include <unistd.h>
#include <string.h>

int main() {
    int fd[2];
    pipe(fd);

    pid_t child_pid = fork();

    if (child_pid == -1) {
        perror("fork");
        return 1;
    }

    if (child_pid == 0) {
       

        char buffer[100];
        read(fd[0], buffer, sizeof(buffer));
        printf("Child: Received message: %s\n", buffer);
        close(fd[0]);
    } else {
       
        close(fd[0]);

        char message[] = "Hello, child!";
        write(fd[1], message, strlen(message));
        printf("Parent: Sent message to child.\n");
        close(fd[1]);
    }

    return 0;
}
***********************************************************************************************
16./*  Handle the two-way communication between parent and child processes using pipe.  */


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main()
    {
    int parent_to_child_pipe[2];
    int child_to_parent_pipe[2];
    pid_t child_pid;

    if (pipe(parent_to_child_pipe) == -1 || pipe(child_to_parent_pipe) == -1){
        perror("Pipe creation failed");
        exit(EXIT_FAILURE);
   }

    child_pid = fork();

    if (child_pid < 0){
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0){
        // This is the child process

        // Close unused ends of the pipes
        close(parent_to_child_pipe[1]);
        close(child_to_parent_pipe[0]);

        char message[] = "Hello from the child process!\n\n";
        char received_message[100];

        // Read from the parent and write to the parent
        read(parent_to_child_pipe[0], received_message, sizeof(received_message));
        printf("Child received: %s\n\n", received_message);
        write(child_to_parent_pipe[1], "Message from child to parent", 28);

        // Close the ends of the pipes in the child
        close(parent_to_child_pipe[0]);
        close(child_to_parent_pipe[1]);

        exit(EXIT_SUCCESS);
    }

   else{
        // This is the parent process

        // Close unused ends of the pipes
        close(parent_to_child_pipe[0]);
        close(child_to_parent_pipe[1]);

        char message[] = "Hello from the parent process!";
        char received_message[100];

        // Write to the child and read from the child
        write(parent_to_child_pipe[1], message, sizeof(message));
        read(child_to_parent_pipe[0], received_message, sizeof(received_message));
        printf("Parent received: %s\n", received_message);

        // Close the ends of the pipes in the parent
        close(parent_to_child_pipe[1]);
        close(child_to_parent_pipe[0]);
   }

    return 0;
}

***************************************************************************************
17./*  Implement the following unix/linux command (use fork, pipe and exec system call)
ls –l | wc –l  */



#include<stdio.h>
#include<unistd.h>
int main()
{
    int fd[2],dupFd;
    char *filename1 ="ls";
    char *filename2 ="wc";
    char *arg1 = "-l";
    pipe(fd);
    if(!fork())// return 0 for child process and 1 for parent process
    {
        close(1); // 1 for closing stdout
        dup(fd[1]);
        close(fd[0]);
        execlp(filename1,filename1,arg1,NULL);
    }
    else
    {
        close(0);
        dup(fd[0]);
        close(fd[1]);
        execlp(filename2,filename2,arg1,NULL);
    }
}
*********************************************************************************
18./* Write a C program to create „n‟ child processes. When all „n‟ child processes terminates, Display total cumulative time children spent in user and kernel mode. */



#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/resource.h>

int main() {
    int i;
    int n = 5;  
    struct rusage rusage_child;
    struct timeval user_time, kernel_time;

    for (i = 0; i < n; i++) {
        pid_t child_pid = fork();

        if (child_pid == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        } else if (child_pid == 0) {
           
            printf("Child %d is running...\n", i + 1);
            sleep(2);
            exit(EXIT_SUCCESS);
        }
    }
    int status;
    while (n > 0) {
        pid_t terminated_pid = wait(&status);
        if (WIFEXITED(status)) {
            n--;
        }
    }
    getrusage(RUSAGE_CHILDREN, &rusage_child);
    user_time = rusage_child.ru_utime;
    kernel_time = rusage_child.ru_stime;

    printf("Total User Time: %ld.%06ld seconds\n", user_time.tv_sec, user_time.tv_usec);
    printf("Total Kernel Time: %ld.%06ld seconds\n", kernel_time.tv_sec, kernel_time.tv_usec);

    return 0;
}

*********************************************************************************************************
19./*  Write a C program to create an unnamed pipe. The child process will write
following three messages to pipe and parent process display it.
Message1 = “Hello World”
Message2 = “Hello SPPU”
Message3 = “Linux is Funny”  */


#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#define MSGSIZE 16
char *msg1 = "Hello World";
char *msg2 = "Hello SPPU";
char *msg3 = "Linux is funny";
int main()
{
int fd[2],i;
char buff[MSGSIZE];
if(pipe(fd)<0)
exit(1);
write(fd[1],msg1,MSGSIZE);
write(fd[1],msg2,MSGSIZE);
write(fd[1],msg3,MSGSIZE);
for(i=0;i<3;i++)
{
read(fd[0],buff,MSGSIZE);
printf("\n%s",buff);
}
return 0;
}
**********************************************************************************************************
20./*  Write a program that illustrates how to execute two commands concurrently with a pipe.  */


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int pipe_fd[2];
    pid_t child_pid;

    // Create a pipe
    if (pipe(pipe_fd) == -1) {
        perror("Pipe creation failed");
        exit(EXIT_FAILURE);
    }

    // Create a child process
    child_pid = fork();

    if (child_pid == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) {
        // Child process
        close(pipe_fd[1]); // Close the write end of the pipe

        // Redirect standard input to read from the pipe
        dup2(pipe_fd[0], STDIN_FILENO);
        close(pipe_fd[0]); // Close the read end of the pipe

        // Execute the second command
        execlp("grep", "grep", "World", NULL);
    } else {
        // Parent process
        close(pipe_fd[0]); // Close the read end of the pipe

        // Execute the first command and write its output to the pipe
        FILE* pipe_write = fdopen(pipe_fd[1], "w");
        if (pipe_write == NULL) {
            perror("fdopen failed");
            exit(EXIT_FAILURE);
        }

        fprintf(pipe_write, "Hello, World!");
        fclose(pipe_write);

        // Wait for the child process to finish
        wait(NULL);
    }

    return 0;
}
***********************************************************************************
















