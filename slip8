/*Q1.  Write a C program that redirects standard output to a file output.txt.
(use of dup and open system call).  */

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int file_descriptor = open("redirect_assi13.txt", O_WRONLY | O_CREAT | O_TRUNC);

    if (file_descriptor == -1)
    {
        perror("Failed to open redirect_assi13.txt");
        return 1;
    }

    dup2(file_descriptor, STDOUT_FILENO);
	close(file_descriptor);
	printf("This will be written to redirect_assi13.txt\n");
	dup2(STDOUT_FILENO, STDOUT_FILENO);
	printf("This will be displayed on the terminal\n");	
	return 0;
}


/* Q2. Implement the following unix/linux command (use fork, pipe and exec system call)
ls –l | wc –l  */



#include<stdio.h>
#include<unistd.h>
int main()
{
    int fd[2],dupFd;
    char *filename1 ="ls";
    char *filename2 ="wc";
    char *arg1 = "-l";
    pipe(fd);
    if(!fork())// return 0 for child process and 1 for parent process
    {
        close(1); // 1 for closing stdout
        dup(fd[1]);
        close(fd[0]);
        execlp(filename1,filename1,arg1,NULL);
    }
    else
    {
        close(0);
        dup(fd[0]);
        close(fd[1]);
        execlp(filename2,filename2,arg1,NULL);
    }
}
