

Q.1)	Write a C program that illustrates suspending and resuming processes using signals	
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

int main() 
{
    pid_t child_pid;

    // Create a child process
    child_pid = fork();

    if (child_pid == -1) 
     {
        perror("fork");
        exit(1);
     }

    if (child_pid == 0) 
	{
        // This is the child process
        printf("Child process (PID=%d) is running.\n", getpid());

        while (1) 
	{
            printf("Child process is working...\n");
            sleep(1);
        }
       } 
	else 
	{
        // This is the parent process
        printf("Parent process (PID=%d) is running.\n", getpid());
        sleep(3); // Let the child process run for a few seconds

        // Suspend the child process using SIGSTOP
        printf("Parent is suspending the child process...\n");
        kill(child_pid, SIGSTOP);

        sleep(3); // Let the child process remain suspended

        // Resume the child process using SIGCONT
        printf("Parent is resuming the child process...\n");
        kill(child_pid, SIGCONT);

        sleep(3); // Let the child process run again

        // Terminate the child process
        printf("Parent is terminating the child process...\n");
        kill(child_pid, SIGTERM);
        }

    return 0;
}

Q.2)	Write a C program that a string as an argument and return all the files that begins with that name in the current directory. For example > ./a.out foo will return all file names that begins with foo	
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <prefix>\n", argv[0]);
        return 1;
    }

    char *prefix = argv[1];

    DIR *dir;
    struct dirent *entry;

    dir = opendir(".");
    if (dir == NULL) {
        perror("Error opening directory");
        return 1;
    }

    printf("Files starting with '%s' in the current directory:\n", prefix);

    while ((entry = readdir(dir)) != NULL) {
        if (strncmp(prefix, entry->d_name, strlen(prefix)) == 0) {
            printf("%s\n", entry->d_name);
        }
    }

    closedir(dir);

    return 0;
}


