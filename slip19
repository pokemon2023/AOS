/*Q1.Take multiple files as Command Line Arguments and print their inode number*/

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h> 
#include <sys/types.h> 
#include <sys/stat.h> 
int get_inode (int fd) { 
	struct stat buf; 
	int ret; 
	ret = fstat (fd, &buf); 
	if (ret < 0) { 
		perror ("fstat"); 
		//return −1; 
	} 
	return buf.st_ino; 
} 

int main (int argc, char *argv[]) { 
	int fd, inode; 
	if (argc < 2) { 
	fprintf (stderr, "usage: %s <file>\n", argv[0]); 
	//return 1; 
	} 
	fd = open (argv[1], O_RDONLY); 
	if (fd < 0) { perror ("open"); 
	//return 1; 
	} 
	inode = get_inode(fd); 
	printf ("%d\n", inode); 
	return 0; 
}

/* Q2. Implement the following unix/linux command (use fork, pipe and exec system call)
ls –l | wc –l  */



#include<stdio.h>
#include<unistd.h>
int main()
{
    int fd[2],dupFd;
    char *filename1 ="ls";
    char *filename2 ="wc";
    char *arg1 = "-l";
    pipe(fd);
    if(!fork())// return 0 for child process and 1 for parent process
    {
        close(1); // 1 for closing stdout
        dup(fd[1]);
        close(fd[0]);
        execlp(filename1,filename1,arg1,NULL);
    }
    else
    {
        close(0);
        dup(fd[0]);
        close(fd[1]);
        execlp(filename2,filename2,arg1,NULL);
    }
}
