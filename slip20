/*Q1.Write a C program that illustrates suspending and resuming processes using
signals.*/
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

int main() 
{
    pid_t child_pid;

    // Create a child process
    child_pid = fork();

    if (child_pid == -1) 
     {
        perror("fork");
        exit(1);
     }

    if (child_pid == 0) 
	{
        // This is the child process
        printf("Child process (PID=%d) is running.\n", getpid());

        while (1) 
	{
            printf("Child process is working...\n");
            sleep(1);
        }
       } 
	else 
	{
        // This is the parent process
        printf("Parent process (PID=%d) is running.\n", getpid());
        sleep(3); // Let the child process run for a few seconds

        // Suspend the child process using SIGSTOP
        printf("Parent is suspending the child process...\n");
        kill(child_pid, SIGSTOP);

        sleep(3); // Let the child process remain suspended

        // Resume the child process using SIGCONT
        printf("Parent is resuming the child process...\n");
        kill(child_pid, SIGCONT);

        sleep(3); // Let the child process run again

        // Terminate the child process
        printf("Parent is terminating the child process...\n");
        kill(child_pid, SIGTERM);
        }

    return 0;
}

/*Q2.  Write a C program to Identify the type (Directory, character device, Block
device, Regular file, FIFO or pipe, symbolic link or socket) of given file using
stat() system call.  */

#include <stdio.h>
#include <sys/stat.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <file_path>\n", argv[0]);
        return 1;
    }

    struct stat fileStat;

    if (stat(argv[1], &fileStat) < 0) {
        perror("stat");
        return 1;
    }

    printf("File type: ");

    if (S_ISDIR(fileStat.st_mode)) {
        printf("Directory\n");
    } else if (S_ISCHR(fileStat.st_mode)) {
        printf("Character Device\n");
    } else if (S_ISBLK(fileStat.st_mode)) {
        printf("Block Device\n");
    } else if (S_ISREG(fileStat.st_mode)) {
        printf("Regular File\n");
    } else if (S_ISFIFO(fileStat.st_mode)) {
        printf("FIFO or Pipe\n");
    } else if (S_ISLNK(fileStat.st_mode)) {
        printf("Symbolic Link\n");
    } else if (S_ISSOCK(fileStat.st_mode)) {
        printf("Socket\n");
    } else {
        printf("Unknown\n");
    }

    return 0;
}

