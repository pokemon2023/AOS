/*Q1.  Generate parent process to write unnamed pipe and will read from it  */


#include <stdio.h>
#include <unistd.h>
#include <string.h>

int main() {
    int fd[2];
    pipe(fd);

    pid_t child_pid = fork();

    if (child_pid == -1) {
        perror("fork");
        return 1;
    }

    if (child_pid == 0) {
       

        char buffer[100];
        read(fd[0], buffer, sizeof(buffer));
        printf("Child: Received message: %s\n", buffer);
        close(fd[0]);
    } else {
       
        close(fd[0]);

        char message[] = "Hello, child!";
        write(fd[1], message, strlen(message));
        printf("Parent: Sent message to child.\n");
        close(fd[1]);
    }

    return 0;
}

/* Q2. Write a C program to Identify the type (Directory, character device, Block
device, Regular file, FIFO or pipe, symbolic link or socket) of given file using
stat() system call.  */

#include <stdio.h>
#include <sys/stat.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <file_path>\n", argv[0]);
        return 1;
    }

    struct stat fileStat;

    if (stat(argv[1], &fileStat) < 0) {
        perror("stat");
        return 1;
    }

    printf("File type: ");

    if (S_ISDIR(fileStat.st_mode)) {
        printf("Directory\n");
    } else if (S_ISCHR(fileStat.st_mode)) {
        printf("Character Device\n");
    } else if (S_ISBLK(fileStat.st_mode)) {
        printf("Block Device\n");
    } else if (S_ISREG(fileStat.st_mode)) {
        printf("Regular File\n");
    } else if (S_ISFIFO(fileStat.st_mode)) {
        printf("FIFO or Pipe\n");
    } else if (S_ISLNK(fileStat.st_mode)) {
        printf("Symbolic Link\n");
    } else if (S_ISSOCK(fileStat.st_mode)) {
        printf("Socket\n");
    } else {
        printf("Unknown\n");
    }

    return 0;
}
